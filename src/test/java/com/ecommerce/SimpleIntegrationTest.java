package com.ecommerce;

import com.ecommerce.events.*;
import com.ecommerce.order.Order;
import com.ecommerce.order.OrderStatus;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.DisplayName;
import static org.junit.jupiter.api.Assertions.*;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

/**
 * Simple integration test to verify the system works end-to-end.
 * This code was generated by an LLM - hatchling
 */
@DisplayName("Simple Integration Test")
public class SimpleIntegrationTest {
    
    @Test
    @DisplayName("Should process complete order lifecycle")
    void testCompleteOrderLifecycle() {
        // Given
        OrderProcessingSystem system = new OrderProcessingSystem();
        
        List<OrderItem> items = Arrays.asList(
            new OrderItem("P001", "Laptop", 1, new BigDecimal("100.00"))
        );
        
        // When - Create order
        OrderCreatedEvent createEvent = new OrderCreatedEvent(
            "ORD001", "CUST001", items, new BigDecimal("100.00"), "123 Main St"
        );
        Order order = system.processEvent(createEvent);
        
        // Then - Order should be created
        assertNotNull(order);
        assertEquals("ORD001", order.getOrderId());
        assertEquals(OrderStatus.CREATED, order.getStatus());
        
        // When - Payment received
        PaymentReceivedEvent paymentEvent = new PaymentReceivedEvent(
            "ORD001", "PAY001", new BigDecimal("100.00"), "Credit Card", "TXN001"
        );
        order = system.processEvent(paymentEvent);
        
        // Then - Order should be paid
        assertNotNull(order);
        assertEquals(OrderStatus.PAID, order.getStatus());
        assertEquals("PAY001", order.getPaymentId());
        
        // When - Shipping scheduled
        ShippingScheduledEvent shippingEvent = new ShippingScheduledEvent(
            "ORD001", "SHIP001", java.time.LocalDateTime.now().plusDays(1), 
            "FedEx", "FX123456789", "Standard"
        );
        order = system.processEvent(shippingEvent);
        
        // Then - Order should be processing
        assertNotNull(order);
        assertEquals(OrderStatus.PROCESSING, order.getStatus());
        assertEquals("FX123456789", order.getTrackingNumber());
        
        // Verify order can be retrieved
        Order retrievedOrder = system.getOrder("ORD001");
        assertNotNull(retrievedOrder);
        assertEquals("ORD001", retrievedOrder.getOrderId());
        assertEquals(OrderStatus.PROCESSING, retrievedOrder.getStatus());
    }
}
