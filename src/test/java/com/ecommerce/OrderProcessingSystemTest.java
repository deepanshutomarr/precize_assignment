package com.ecommerce;

import com.ecommerce.events.*;
import com.ecommerce.order.Order;
import com.ecommerce.order.OrderStatus;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.DisplayName;
import static org.junit.jupiter.api.Assertions.*;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

/**
 * Test class for the OrderProcessingSystem.
 * This code was generated by an LLM - hatchling
 */
@DisplayName("Order Processing System Tests")
public class OrderProcessingSystemTest {
    
    private OrderProcessingSystem system;
    
    @BeforeEach
    void setUp() {
        system = new OrderProcessingSystem();
    }
    
    @Test
    @DisplayName("Should create order from OrderCreatedEvent")
    void testOrderCreation() {
        // Given
        List<OrderItem> items = Arrays.asList(
            new OrderItem("P001", "Laptop", 2, new BigDecimal("50.00"))
        );
        OrderCreatedEvent event = new OrderCreatedEvent(
            "ORD001", "CUST001", items, new BigDecimal("100.00"), "123 Main St"
        );
        
        // When
        Order order = system.processEvent(event);
        
        // Then
        assertNotNull(order);
        assertEquals("ORD001", order.getOrderId());
        assertEquals("CUST001", order.getCustomerId());
        assertEquals(OrderStatus.CREATED, order.getStatus());
        assertEquals(new BigDecimal("100.00"), order.getTotalAmount());
        assertEquals(1, order.getItems().size());
    }
    
    @Test
    @DisplayName("Should update order status to PAID when payment received")
    void testPaymentProcessing() {
        // Given
        List<OrderItem> items = Arrays.asList(
            new OrderItem("P001", "Laptop", 1, new BigDecimal("100.00"))
        );
        OrderCreatedEvent createEvent = new OrderCreatedEvent(
            "ORD001", "CUST001", items, new BigDecimal("100.00"), "123 Main St"
        );
        system.processEvent(createEvent);
        
        PaymentReceivedEvent paymentEvent = new PaymentReceivedEvent(
            "ORD001", "PAY001", new BigDecimal("100.00"), "Credit Card", "TXN001"
        );
        
        // When
        Order order = system.processEvent(paymentEvent);
        
        // Then
        assertNotNull(order);
        assertEquals(OrderStatus.PAID, order.getStatus());
        assertEquals("PAY001", order.getPaymentId());
    }
    
    @Test
    @DisplayName("Should update order status to CANCELLED when order cancelled")
    void testOrderCancellation() {
        // Given
        List<OrderItem> items = Arrays.asList(
            new OrderItem("P001", "Laptop", 1, new BigDecimal("100.00"))
        );
        OrderCreatedEvent createEvent = new OrderCreatedEvent(
            "ORD001", "CUST001", items, new BigDecimal("100.00"), "123 Main St"
        );
        system.processEvent(createEvent);
        
        OrderCancelledEvent cancelEvent = new OrderCancelledEvent(
            "ORD001", "Customer request", "CUST001", true
        );
        
        // When
        Order order = system.processEvent(cancelEvent);
        
        // Then
        assertNotNull(order);
        assertEquals(OrderStatus.CANCELLED, order.getStatus());
    }
    
    @Test
    @DisplayName("Should handle unknown event types gracefully")
    void testUnknownEventType() {
        // Given - Create a mock event with unknown type
        Event unknownEvent = new Event("ORD001", EventType.ORDER_CREATED) {
            // Mock implementation
        };
        
        // When
        Order order = system.processEvent(unknownEvent);
        
        // Then - Should not throw exception, but return null
        assertNull(order);
    }
    
    @Test
    @DisplayName("Should retrieve order by ID")
    void testGetOrderById() {
        // Given
        List<OrderItem> items = Arrays.asList(
            new OrderItem("P001", "Laptop", 1, new BigDecimal("100.00"))
        );
        OrderCreatedEvent event = new OrderCreatedEvent(
            "ORD001", "CUST001", items, new BigDecimal("100.00"), "123 Main St"
        );
        system.processEvent(event);
        
        // When
        Order order = system.getOrder("ORD001");
        
        // Then
        assertNotNull(order);
        assertEquals("ORD001", order.getOrderId());
    }
    
    @Test
    @DisplayName("Should return null for non-existent order")
    void testGetNonExistentOrder() {
        // When
        Order order = system.getOrder("NON_EXISTENT");
        
        // Then
        assertNull(order);
    }
}
