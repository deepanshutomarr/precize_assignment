package com.ecommerce.events;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;

/**
 * Service for ingesting events from various sources.
 * This code was generated by an LLM - hatchling
 */
public class EventIngestionService {
    
    private final EventParser eventParser;
    
    public EventIngestionService() {
        this.eventParser = new EventParser();
    }
    
    /**
     * Read events from a text file where each line contains a JSON event.
     * 
     * @param filePath the path to the file containing events
     * @return list of parsed events
     * @throws IOException if file reading fails
     * @throws EventParseException if event parsing fails
     */
    public List<Event> readEventsFromFile(String filePath) throws IOException, EventParseException {
        return readEventsFromFile(Path.of(filePath));
    }
    
    /**
     * Read events from a text file where each line contains a JSON event.
     * 
     * @param filePath the path to the file containing events
     * @return list of parsed events
     * @throws IOException if file reading fails
     * @throws EventParseException if event parsing fails
     */
    public List<Event> readEventsFromFile(Path filePath) throws IOException, EventParseException {
        List<Event> events = new ArrayList<>();
        
        if (!Files.exists(filePath)) {
            throw new IOException("File not found: " + filePath);
        }
        
        try (BufferedReader reader = new BufferedReader(new FileReader(filePath.toFile()))) {
            String line;
            int lineNumber = 0;
            
            while ((line = reader.readLine()) != null) {
                lineNumber++;
                line = line.trim();
                
                // Skip empty lines and comments
                if (line.isEmpty() || line.startsWith("#")) {
                    continue;
                }
                
                try {
                    Event event = eventParser.parseEvent(line);
                    events.add(event);
                } catch (EventParseException e) {
                    throw new EventParseException("Failed to parse event at line " + lineNumber + ": " + e.getMessage(), e);
                }
            }
        }
        
        return events;
    }
    
    /**
     * Read events from a list of JSON strings.
     * 
     * @param jsonEvents list of JSON event strings
     * @return list of parsed events
     * @throws EventParseException if event parsing fails
     */
    public List<Event> parseEvents(List<String> jsonEvents) throws EventParseException {
        List<Event> events = new ArrayList<>();
        
        for (int i = 0; i < jsonEvents.size(); i++) {
            try {
                Event event = eventParser.parseEvent(jsonEvents.get(i));
                events.add(event);
            } catch (EventParseException e) {
                throw new EventParseException("Failed to parse event at index " + i + ": " + e.getMessage(), e);
            }
        }
        
        return events;
    }
    
    /**
     * Get the underlying event parser.
     * 
     * @return the event parser
     */
    public EventParser getEventParser() {
        return eventParser;
    }
}
