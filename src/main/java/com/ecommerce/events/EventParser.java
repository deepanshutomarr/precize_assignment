package com.ecommerce.events;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Parses JSON event data into Event objects.
 * This code was generated by an LLM - hatchling
 */
public class EventParser {
    
    private static final DateTimeFormatter TIMESTAMP_FORMATTER = DateTimeFormatter.ISO_DATE_TIME;
    
    public EventParser() {
        // Simple JSON parser implementation
    }
    
    /**
     * Parse a JSON string into an Event object.
     * 
     * @param jsonEvent the JSON string representing an event
     * @return the parsed Event object
     * @throws EventParseException if parsing fails
     */
    public Event parseEvent(String jsonEvent) throws EventParseException {
        try {
            String eventType = extractValue(jsonEvent, "eventType");
            
            switch (eventType) {
                case "OrderCreated":
                    return parseOrderCreatedEvent(jsonEvent);
                case "PaymentReceived":
                    return parsePaymentReceivedEvent(jsonEvent);
                case "ShippingScheduled":
                    return parseShippingScheduledEvent(jsonEvent);
                case "OrderCancelled":
                    return parseOrderCancelledEvent(jsonEvent);
                case "OrderShipped":
                    return parseOrderShippedEvent(jsonEvent);
                case "OrderDelivered":
                    return parseOrderDeliveredEvent(jsonEvent);
                default:
                    throw new EventParseException("Unknown event type: " + eventType);
            }
        } catch (Exception e) {
            throw new EventParseException("Failed to parse event: " + e.getMessage(), e);
        }
    }
    
    private String extractValue(String json, String key) {
        Pattern pattern = Pattern.compile("\"" + key + "\"\\s*:\\s*\"([^\"]*)\"");
        Matcher matcher = pattern.matcher(json);
        if (matcher.find()) {
            return matcher.group(1);
        }
        return null;
    }
    
    private BigDecimal extractDecimalValue(String json, String key) {
        Pattern pattern = Pattern.compile("\"" + key + "\"\\s*:\\s*([0-9]+\\.?[0-9]*)");
        Matcher matcher = pattern.matcher(json);
        if (matcher.find()) {
            return new BigDecimal(matcher.group(1));
        }
        return BigDecimal.ZERO;
    }
    
    private boolean extractBooleanValue(String json, String key) {
        Pattern pattern = Pattern.compile("\"" + key + "\"\\s*:\\s*(true|false)");
        Matcher matcher = pattern.matcher(json);
        if (matcher.find()) {
            return Boolean.parseBoolean(matcher.group(1));
        }
        return false;
    }
    
    private OrderCreatedEvent parseOrderCreatedEvent(String json) {
        String orderId = extractValue(json, "orderId");
        String customerId = extractValue(json, "customerId");
        BigDecimal totalAmount = extractDecimalValue(json, "totalAmount");
        String shippingAddress = extractValue(json, "shippingAddress");
        
        List<OrderItem> items = parseOrderItems(json);
        
        return new OrderCreatedEvent(orderId, customerId, items, totalAmount, shippingAddress);
    }
    
    private PaymentReceivedEvent parsePaymentReceivedEvent(String json) {
        String orderId = extractValue(json, "orderId");
        String paymentId = extractValue(json, "paymentId");
        BigDecimal amount = extractDecimalValue(json, "amount");
        String paymentMethod = extractValue(json, "paymentMethod");
        String transactionId = extractValue(json, "transactionId");
        
        return new PaymentReceivedEvent(orderId, paymentId, amount, paymentMethod, transactionId);
    }
    
    private ShippingScheduledEvent parseShippingScheduledEvent(String json) {
        String orderId = extractValue(json, "orderId");
        String shippingId = extractValue(json, "shippingId");
        String scheduledDateStr = extractValue(json, "scheduledDate");
        LocalDateTime scheduledDate = LocalDateTime.parse(scheduledDateStr, TIMESTAMP_FORMATTER);
        String carrier = extractValue(json, "carrier");
        String trackingNumber = extractValue(json, "trackingNumber");
        String shippingMethod = extractValue(json, "shippingMethod");
        
        return new ShippingScheduledEvent(orderId, shippingId, scheduledDate, carrier, trackingNumber, shippingMethod);
    }
    
    private OrderCancelledEvent parseOrderCancelledEvent(String json) {
        String orderId = extractValue(json, "orderId");
        String reason = extractValue(json, "reason");
        String cancelledBy = extractValue(json, "cancelledBy");
        boolean refundRequired = extractBooleanValue(json, "refundRequired");
        
        return new OrderCancelledEvent(orderId, reason, cancelledBy, refundRequired);
    }
    
    private OrderShippedEvent parseOrderShippedEvent(String json) {
        String orderId = extractValue(json, "orderId");
        String shippingId = extractValue(json, "shippingId");
        String shippedDateStr = extractValue(json, "shippedDate");
        LocalDateTime shippedDate = LocalDateTime.parse(shippedDateStr, TIMESTAMP_FORMATTER);
        String carrier = extractValue(json, "carrier");
        String trackingNumber = extractValue(json, "trackingNumber");
        
        return new OrderShippedEvent(orderId, shippingId, shippedDate, carrier, trackingNumber);
    }
    
    private OrderDeliveredEvent parseOrderDeliveredEvent(String json) {
        String orderId = extractValue(json, "orderId");
        String deliveredDateStr = extractValue(json, "deliveredDate");
        LocalDateTime deliveredDate = LocalDateTime.parse(deliveredDateStr, TIMESTAMP_FORMATTER);
        String deliveredTo = extractValue(json, "deliveredTo");
        String signature = extractValue(json, "signature");
        
        return new OrderDeliveredEvent(orderId, deliveredDate, deliveredTo, signature);
    }
    
    private List<OrderItem> parseOrderItems(String json) {
        List<OrderItem> items = new ArrayList<>();
        
        // Simple regex to extract items array - this is a simplified approach
        Pattern pattern = Pattern.compile("\"items\"\\s*:\\s*\\[(.*?)\\]");
        Matcher matcher = pattern.matcher(json);
        if (matcher.find()) {
            String itemsStr = matcher.group(1);
            // Parse individual items from the array
            Pattern itemPattern = Pattern.compile("\\{[^}]*\\}");
            Matcher itemMatcher = itemPattern.matcher(itemsStr);
            
            while (itemMatcher.find()) {
                String itemJson = itemMatcher.group();
                String productId = extractValue(itemJson, "itemId");
                String productName = extractValue(itemJson, "productName");
                if (productName == null) productName = "Unknown Product";
                
                // Extract quantity
                Pattern qtyPattern = Pattern.compile("\"qty\"\\s*:\\s*([0-9]+)");
                Matcher qtyMatcher = qtyPattern.matcher(itemJson);
                int quantity = qtyMatcher.find() ? Integer.parseInt(qtyMatcher.group(1)) : 1;
                
                // Extract unit price
                Pattern pricePattern = Pattern.compile("\"unitPrice\"\\s*:\\s*([0-9]+\\.?[0-9]*)");
                Matcher priceMatcher = pricePattern.matcher(itemJson);
                BigDecimal unitPrice = priceMatcher.find() ? new BigDecimal(priceMatcher.group(1)) : BigDecimal.ZERO;
                
                items.add(new OrderItem(productId, productName, quantity, unitPrice));
            }
        }
        
        return items;
    }
}
