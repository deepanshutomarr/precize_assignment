package com.ecommerce.observer;

import com.ecommerce.events.Event;
import com.ecommerce.order.Order;

/**
 * Observer that prints alerts for critical order status changes.
 * This code was generated by an LLM - hatchling
 */
public class AlertOrderObserver implements OrderObserver {
        
    @Override
    public void onOrderEvent(Order order, Event event) {
        // Alert for critical events
        switch (event.getEventType()) {
            case ORDER_CANCELLED:
                System.out.println("üö® CRITICAL ALERT: Order " + order.getOrderId() + " has been CANCELLED!");
                System.out.println("   Customer: " + order.getCustomerId());
                System.out.println("   Total Amount: $" + order.getTotalAmount());
                break;
            case PAYMENT_RECEIVED:
                System.out.println("üí∞ PAYMENT ALERT: Payment received for Order " + order.getOrderId());
                System.out.println("   Amount: $" + order.getTotalAmount());
                break;
            case ORDER_SHIPPED:
                System.out.println("üì¶ SHIPPING ALERT: Order " + order.getOrderId() + " has been SHIPPED!");
                System.out.println("   Tracking: " + order.getTrackingNumber());
                break;
            case ORDER_DELIVERED:
                System.out.println("‚úÖ DELIVERY ALERT: Order " + order.getOrderId() + " has been DELIVERED!");
                break;
            default:
                // No alert for other events
                break;
        }
    }
    
    @Override
    public void onOrderStatusChanged(Order order, String oldStatus, String newStatus) {
        // Alert for critical status changes
        if (isCriticalStatusChange(oldStatus, newStatus)) {
            System.out.println("üö® STATUS ALERT: Order " + order.getOrderId() + 
                             " status changed from " + oldStatus + " to " + newStatus);
            System.out.println("   Customer: " + order.getCustomerId());
            System.out.println("   Amount: $" + order.getTotalAmount());
            
            // Additional context for specific status changes
            switch (newStatus) {
                case "CANCELLED":
                    System.out.println("   ‚ö†Ô∏è  This order requires immediate attention!");
                    break;
                case "DELIVERED":
                    System.out.println("   üéâ Order successfully completed!");
                    break;
                case "SHIPPED":
                    System.out.println("   üì¶ Order is now in transit");
                    break;
            }
        }
    }
    
    private boolean isCriticalStatusChange(String oldStatus, String newStatus) {
        // Define which status changes are considered critical
        return newStatus.equals("CANCELLED") ||
               newStatus.equals("DELIVERED") ||
               newStatus.equals("SHIPPED") ||
               (oldStatus.equals("PENDING_PAYMENT") && newStatus.equals("PAID"));
    }
}
