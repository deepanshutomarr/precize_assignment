package com.ecommerce;

import com.ecommerce.events.*;
import com.ecommerce.order.Order;
import com.ecommerce.observer.*;
import com.ecommerce.processor.EventProcessor;
import java.util.List;
import java.util.logging.Logger;

/**
 * Main application class demonstrating the event-driven order processing system.
 * This code was generated by an LLM - hatchling
 */
public class OrderProcessingSystem {
    
    private static final Logger LOGGER = Logger.getLogger(OrderProcessingSystem.class.getName());
    
    private final EventIngestionService ingestionService;
    private final EventProcessor eventProcessor;
    private final OrderEventManager eventManager;
    
    public OrderProcessingSystem() {
        this.eventManager = new OrderEventManager();
        this.eventProcessor = new EventProcessor(eventManager);
        this.ingestionService = new EventIngestionService();
        
        // Register observers
        setupObservers();
    }
    
    private void setupObservers() {
        // Register logging observer
        LoggingOrderObserver loggingObserver = new LoggingOrderObserver();
        eventManager.registerObserver(loggingObserver);
        
        // Register alert observer
        AlertOrderObserver alertObserver = new AlertOrderObserver();
        eventManager.registerObserver(alertObserver);
        
        LOGGER.info("Registered " + eventManager.getObserverCount() + " observers");
    }
    
    /**
     * Process events from a file.
     * 
     * @param filePath path to the file containing JSON events
     * @return number of events processed
     */
    public int processEventsFromFile(String filePath) {
        try {
            LOGGER.info("Processing events from file: " + filePath);
            List<Event> events = ingestionService.readEventsFromFile(filePath);
            
            int processedCount = 0;
            for (Event event : events) {
                Order processedOrder = eventProcessor.processEvent(event);
                if (processedOrder != null) {
                    processedCount++;
                }
            }
            
            LOGGER.info("Successfully processed " + processedCount + " out of " + events.size() + " events");
            return processedCount;
            
        } catch (Exception e) {
            LOGGER.severe("Error processing events from file: " + e.getMessage());
            return 0;
        }
    }
    
    /**
     * Process a single event.
     * 
     * @param event the event to process
     * @return the processed order, or null if processing failed
     */
    public Order processEvent(Event event) {
        return eventProcessor.processEvent(event);
    }
    
    /**
     * Get an order by ID.
     * 
     * @param orderId the order ID
     * @return the order, or null if not found
     */
    public Order getOrder(String orderId) {
        return eventProcessor.getOrder(orderId);
    }
    
    /**
     * Get all orders in the system.
     * 
     * @return all orders
     */
    public java.util.Map<String, Order> getAllOrders() {
        return eventProcessor.getAllOrders();
    }
    
    /**
     * Register a new observer.
     * 
     * @param observer the observer to register
     */
    public void registerObserver(OrderObserver observer) {
        eventManager.registerObserver(observer);
    }
    
    /**
     * Unregister an observer.
     * 
     * @param observer the observer to unregister
     */
    public void unregisterObserver(OrderObserver observer) {
        eventManager.unregisterObserver(observer);
    }
    
    /**
     * Clear all orders (useful for testing).
     */
    public void clearOrders() {
        eventProcessor.clearOrders();
    }
    
    /**
     * Main method to demonstrate the system.
     */
    public static void main(String[] args) {
        System.out.println("ðŸš€ Starting Event-Driven Order Processing System");
        System.out.println("================================================");
        
        OrderProcessingSystem system = new OrderProcessingSystem();
        
        try {
            // Process events from the sample file
            String sampleFile = "src/main/resources/sample_events.json";
            int processedCount = system.processEventsFromFile(sampleFile);
            
            System.out.println("\nðŸ“Š Processing Summary:");
            System.out.println("Processed " + processedCount + " events successfully");
            
            // Display all orders
            System.out.println("\nðŸ“‹ Current Orders:");
            java.util.Map<String, Order> orders = system.getAllOrders();
            if (orders.isEmpty()) {
                System.out.println("No orders found.");
            } else {
                orders.values().forEach(order -> {
                    System.out.println("Order ID: " + order.getOrderId());
                    System.out.println("  Customer: " + order.getCustomerId());
                    System.out.println("  Status: " + order.getStatus());
                    System.out.println("  Total: $" + order.getTotalAmount());
                    System.out.println("  Items: " + order.getItems().size());
                    System.out.println("  Payment ID: " + (order.getPaymentId() != null ? order.getPaymentId() : "N/A"));
                    System.out.println("  Tracking: " + (order.getTrackingNumber() != null ? order.getTrackingNumber() : "N/A"));
                    System.out.println();
                });
            }
            
        } catch (Exception e) {
            System.err.println("Error running the system: " + e.getMessage());
            e.printStackTrace();
        }
        
        System.out.println("âœ… System demonstration completed!");
    }
}
